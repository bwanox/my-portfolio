import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { ConsultationService } from '../../services/consultation.service';
import { ConsultationStateService } from '../../services/step-state.service';

export interface SelectedPerson {
  name: string;
  type: 'partner' | 'kid' | 'adherent';
  index?: number;
}

@Component({
  selector: 'app-consultation',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterModule
  ],
  templateUrl: './consultation.html',
  styleUrl: './consultation.css'
})
export class Consultation implements OnInit {
  referenceNumber = '1';
  today = new Date();
  statut: 'marie' | 'divorce' | 'celibataire' = 'marie';
  adherent: boolean | null = null;
  number = '';
  names = '';
  hasPartner = false;
  partnerName = '';
  hasKids = false;
  consultationName = '';
  adherentName = '';
  immatriculationId = '';
  kidsAndPartner = '';
  consultationId = '1';
  kidsCount = 0;
  kids: { name: string; birthDate: string }[] = [];
  kidsOptions = Array.from({ length: 20 }, (_, i) => i);
  editMode = false;

  // Tab-related properties
  selectedPerson: SelectedPerson | null = null;
  activeTab: 'consultation' | 'creation' | 'suppression' | 'impression' | null = null;

  constructor(
    private consultationService: ConsultationService,
    private consultationState: ConsultationStateService,
    private router: Router
  ) {}

  ngOnInit() {
    this.updatePartnerStatus();
    this.loadUserData();
  }

  updatePartnerStatus() {
    if (this.statut !== 'marie') {
      this.hasPartner = false;
    }
  }

  onKidsCountChange() {
    if (this.kidsCount > this.kids.length) {
      for (let i = this.kids.length; i < this.kidsCount; i++) {
        this.kids.push({ name: '', birthDate: '' });
      }
    } else {
      this.kids = this.kids.slice(0, this.kidsCount);
    }
  }

  loadUserData() {
    this.consultationService.getUserInfo().subscribe({
      next: (user) => {
        this.consultationName = user.name || '';
        this.adherentName = user.name || '';
        this.number = user.number || '';
        this.partnerName = user.partnerName || '';
        this.kidsCount = user.kids ? user.kids.length : 0;
        this.kids = user.kids ? [...user.kids] : [];
        this.immatriculationId = user.immatriculationId || '';
        this.kidsAndPartner = user.kidsAndPartner || '';
        this.statut = user.statut || 'marie';
        this.adherent = user.adherent || null;
        this.updatePartnerStatus();
      },
      error: (error) => {
        console.error('Error loading user data:', error);
        // Clear fields on error
        this.consultationName = '';
        this.adherentName = '';
        this.number = '';
        this.statut = 'marie';
        this.partnerName = '';
        this.kidsCount = 0;
        this.kids = [];
        this.immatriculationId = '';
        this.kidsAndPartner = '';
      }
    });
  }

  selectPerson(person: SelectedPerson) {
    this.selectedPerson = person;
    this.consultationState.setSelectedPerson(person);
    this.router.navigate(['/tabs-selection']);
  }

  // Helper method to get person ID for routing
  getPersonId(): string {
    if (!this.selectedPerson) return '';
    if (this.selectedPerson.type === 'partner') return 'partner';
    if (this.selectedPerson.type === 'adherent') return 'adherent';
    return `kid-${this.selectedPerson.index}`;
  }


}


import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
export interface UserInfo {
  id: string;
  name: string;
  number: string;
  partnerName?: string;
  kids?: { name: string; birthDate: string }[];
  immatriculationId?: string;
  kidsAndPartner?: string;
  statut?: 'marie' | 'divorce' | 'celibataire';
  adherent?: boolean;
}

export interface PersonTickets {
  userId: string;
  personName: string;
  tickets: Array<{
    id: string;
    type: string;
    status: string;
    dateCreated: string;
    description?: string;
  }>;
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
  errors?: string[];
}

@Injectable({
  providedIn: 'root'
})
export class ConsultationService {
  private apiUrl = 'http://localhost:3000';

  constructor(private http: HttpClient) {}

  private getHttpOptions() {
    return {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      }),
      withCredentials: true //ensuring cookies are sent with requests
    };
  }

  private handleError(error: any): Observable<never> {
    console.error('API Error:', error);

    if (error.status === 401) {
      // Handle unauthorized - redirect to login handled by component
      return throwError(() => ({ status: 401, message: 'Unauthorized' }));
    }

    if (error.status === 403) {
      return throwError(() => ({ status: 403, message: 'Forbidden' }));
    }

    if (error.status === 0) {
      return throwError(() => ({ status: 0, message: 'Network error' }));
    }

    const errorMessage = error.error?.message || error.message || 'An unexpected error occurred';
    return throwError(() => ({ status: error.status, message: errorMessage }));
  }

  //get current user info
  getUserInfo(): Observable<UserInfo> {
    return this.http.get<ApiResponse<UserInfo>>(`${this.apiUrl}/api/user/profile`, this.getHttpOptions())
      .pipe(
        map(response => {
          if (response.success && response.data) {
            return response.data;
          }
          throw new Error(response.message || 'Failed to fetch user info');
        }),
        catchError(this.handleError)
      );
  }


  //update user info
  updateUserInfo(userInfo: Partial<UserInfo>): Observable<UserInfo> {
    return this.http.put<ApiResponse<UserInfo>>(`${this.apiUrl}/api/user/profile`, userInfo, this.getHttpOptions())
      .pipe(
        map(response => {
          if (response.success && response.data) {
            return response.data;
          }
          throw new Error(response.message || 'Failed to update user info');
        }),
        catchError(this.handleError)
      );
  }

  //check if the user is a valid one
  checkSession(): Observable<boolean> {
    return this.http.get<ApiResponse<{ isValid: boolean }>>(`${this.apiUrl}/api/auth/session`, this.getHttpOptions())
      .pipe(
        map(response => {
          return response.success && response.data?.isValid === true;
        }),
        catchError((error) => {
          // If session check fails => session invalid
          return throwError(() => ({ status: 401, message: 'Session invalid' }));
        })
      );
  }
  //logout
  logout(): Observable<boolean> {
    return this.http.post<ApiResponse<any>>(`${this.apiUrl}/api/auth/logout`, {}, this.getHttpOptions())
      .pipe(
        map(response => response.success),
        catchError(this.handleError)
      );
  }
}
